using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class RecurringCustomer : Customer
{
    //Index of this customer's EventTree in EventManager
    //Set manually on prefab (for now)
    public int EventTreeIndex;

    //Name to display on clothing tags, instead of ticket number
    public string customerName;

    

    private RecurringCustomerInteractable interactable;

    protected override void OnEnable() {
        base.OnEnable();
        EventManager.EndDialog += OnEndDialog;
    }

    protected override void OnDisable() {
        base.OnDisable();
        EventManager.EndDialog -= OnEndDialog;
    }

    protected override void Start() {
        laundromatBasketPrefab = (GameObject)Resources.Load("LaundromatBasket");
        animator = GetComponentInChildren<Animator>();
        interactable = GetComponent<RecurringCustomerInteractable>();

        //silhouette = UnityEngine.Random.Range(0, 3);

        ticketNumber = CustomerManager.instance.GetTicketNumber();
        state = CustomerState.Queueing;

        //Laundry will be generated by NarrativeEventListener on a case-by-case basis
        basket = new Basket();
        garments = new List<Garment>();

        //Upon arrival, a new Customer requests a spot in Queue from the CustomerManager
        CustomerManager.instance.AssignQueueSpot(this);

    }

    protected override void Arriving() {
        if (MoveTowards(spot.position)) {
            //RecurringCustomers do not place a basket on the counter straight away.
            state = CustomerState.WaitingForService;
        }
    }
    
    private IEnumerator whistleCoroutine;
 
    protected override void WaitingForService() {
        //Called every frame
        //While waiting for service, this customer can be interacted with to initiate a narrative event
        //Intentionally left blank. RecurringCustomers do not become impatient.
        if(whistleCoroutine == null) {
        whistleCoroutine = WhistleCoroutine();
        StartCoroutine(whistleCoroutine);
        }
    }

    private IEnumerator WhistleCoroutine(){
         AudioManager.instance.PlaySound(Sounds.OllieWhistle);
         yield return new WaitForLaundromatSeconds(15); 
         whistleCoroutine = null;
    }
    

   
    private void OnEndDialog(int eventTreeIndex) {
        if(EventTreeIndex == eventTreeIndex) {
            if(basket.contents.Count > 0) {
                GiveBasketToPlayer();
                state = CustomerState.WaitingForClothes;
                CustomerManager.instance.AssignRandomWaitingSpot(this);
            }
            else {
                state = CustomerState.Leaving;
            }
        }
    }

    public void GiveBasketToPlayer() {
        LaundromatBasket laundromatBasket = Instantiate(laundromatBasketPrefab, spot.position + Vector3.up, transform.rotation).GetComponent<LaundromatBasket>();
        laundromatBasket.basket = basket;
        basketOnCounter = laundromatBasket;
        PlayerController.instance.Take(laundromatBasket.gameObject);
    }
}
